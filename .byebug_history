c
self.create_batting( name: batsman[0], status: batsman[1], runs: batsman[2], balls: batsman[3], fours: batsman[4], sixes: batsman[5],strik_rake: batsman[6])
c
self.create_batting( name: batsman[0], status: batsman[1], runs: batsman[2], balls: batsman[3], fours: batsman[4], sixes: batsman[5],strik_rake: batsman[6])
c
page_data.get_batting_card
c
second_score_card
c
score_card
c
scorecard
q
scorecard
scorecard << card
scorecard
c
scorecard
scorecard << card
scorecard
card
scorecard + card
c
scorecard
card
c
card
c
card
c
card
c
card
c
card
c
card
c
card
c
card
c
cc
c
ccc
c
index
index.
td_val.text
c
td_val.text
td_val
c
td_val
c
td
c
td
td.text
c
tds.first.text
tds.count
tds.shift
tds.slice!(0)
tds.delete_at(0)
tds.count
tds
c
val.css("td").last.text
val.css("td")[1].text
val.css("td")[1]
val.css("td").last
val.css("td").first
val.css("td").count
val.css("td")
c
cc
c
index.odd?
index.even?
index
c
index
c
rows.count
c
ccc
c
row.css("th").count
row.css("th")
row
q
c
reload!
c
row
row.css("th")
c
rows[3]
rows[1]
rows = rows.css('tr')
rows = table.css('tr')
rows = doc.css("table.innings").first
c
rows.children.children
------------------------
rows.children
rows.children[1]
rows.children.count
rows.children
rows.childrens
rows = doc.css("div#full-scorecard")
c
rows.count
rows
c
reload!
rows
c
doc.at('<tr>').next[6]
doc.at('<tr>').next[6].text
c
table.first
table.last
table.first
table.count
table
c
n
c
rows = doc.xpath('//table[@class="batting-table innings"]/tbody/tr')
